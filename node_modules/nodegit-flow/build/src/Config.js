'use strict';

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

module.exports = function (NodeGit, _ref) {
  var constants = _ref.constants;

  function _getConfigKeys() {
    return Object.keys(Config.getConfigDefault());
  }

  function _getConfigValue(repo, configKey) {
    if (!repo) {
      return Promise.reject(new Error(constants.ErrorMessage.REPO_REQUIRED));
    }

    if (_getConfigKeys().indexOf(configKey) === -1) {
      return Promise.reject(new Error('Invalid gitflow config key.'));
    }

    return repo.config().then(function (config) {
      return config.getString(configKey);
    }).catch(function () {
      return Promise.reject(new Error('Failed to read config value ' + configKey));
    });
  }

  /**
  * All of this class' functions are attached to `NodeGit.Flow` or a `Flow` instance object
  * @class
  */

  var Config = function () {
    function Config(repo) {
      _classCallCheck(this, Config);

      this.repo = repo;
    }

    /**
    * Get default git flow configuration values you can use for initializing. Note that the `initialize` function does
    * not use any values the user did not explicitly pass in.
    * @return {Object} An object of git flow config key/value pairs.
    */


    _createClass(Config, [{
      key: 'getConfig',


      /**
      * Gets the git flow related config values for the repository
      * @async
      * @return {Object}   An object of git flow config key/value pairs
      */
      value: function getConfig() {
        return Config.getConfig(this.repo);
      }

      /**
      * Gets the config value for the git flow master branch
      * @async
      * @param {Repository}  repo  The nodegit repository to get the config value from
      * @return {String}   The config value of the git flow master branch
      */

    }, {
      key: 'getMasterBranch',


      /**
      * Gets the config value for the git flow master branch
      * @async
      * @return {String} The config value of the git flow master branch
      */
      value: function getMasterBranch() {
        return Config.getMasterBranch(this.repo);
      }

      /**
      * Gets the config value for the git flow develop branch
      * @async
      * @param {Repository}  repo  The nodegit repository to get the config value from
      * @return {String}   The config value of the git flow develop branch
      */

    }, {
      key: 'getDevelopBranch',


      /**
      * Gets the config value for the git flow develop branch
      * @async
      * @return {String}   The config value of the git flow develop branch
      */
      value: function getDevelopBranch() {
        return Config.getDevelopBranch(this.repo);
      }

      /**
      * Gets the config value for the git flow feature prefix
      * @async
      * @param {Repository}  repo  The nodegit repository to get the config value from
      * @return {String}   The config value of the git flow feature prefix
      */

    }, {
      key: 'getFeaturePrefix',


      /**
      * Gets the config value for the git flow feature prefix
      * @async
      * @return {String}   The config value of the git flow feature prefix
      */
      value: function getFeaturePrefix() {
        return Config.getFeaturePrefix(this.repo);
      }

      /**
      * Gets the config value for the git flow release prefix
      * @async
      * @param {Repository}  repo  The nodegit repository to get the config value from
      * @return {String}   The config value of the git flow release prefix
      */

    }, {
      key: 'getReleasePrefix',


      /**
      * Gets the config value for the git flow release prefix
      * @async
      * @return {String}   The config value of the git flow release prefix
      */
      value: function getReleasePrefix() {
        return Config.getReleasePrefix(this.repo);
      }

      /**
      * Gets the config value for the git flow hotfix prefix
      * @async
      * @param {Repository}  repo  The nodegit repository to get the config value from
      * @return {String}   The config value of the git flow hotfix prefix
      */

    }, {
      key: 'getHotfixPrefix',


      /**
      * Gets the config value for the git flow hotfix prefix
      * @async
      * @return {String}   The config value of the git flow hotfix prefix
      */
      value: function getHotfixPrefix() {
        return Config.getHotfixPrefix(this.repo);
      }

      // static getSupportPrefix(repo) {
      //   return _getConfigValue(repo, 'gitflow.prefix.support');
      // }
      //
      // getSupportPrefix() {
      //   return Config.getSupportPrefix(this.repo);
      // }

      /**
      * Gets the config value for the git flow version tag prefix
      * @async
      * @param {Repository}  repo  The nodegit repository to get the config value from
      * @return {String}   The config value of the git flow version tag prefix
      */

    }, {
      key: 'getVersionTagPrefix',


      /**
      * Gets the config value for the git flow version tag prefix
      * @async
      * @return {String}   The config value of the git flow version tag prefix
      */
      value: function getVersionTagPrefix() {
        return Config.getVersionTagPrefix(this.repo);
      }
    }], [{
      key: 'getConfigDefault',
      value: function getConfigDefault() {
        return {
          'gitflow.branch.master': 'master',
          'gitflow.branch.develop': 'develop',

          'gitflow.prefix.feature': 'feature/',
          'gitflow.prefix.release': 'release/',
          'gitflow.prefix.hotfix': 'hotfix/',

          'gitflow.prefix.versiontag': ''
        };
      }

      /**
      * Get a list of git flow config keys that are required for initializing git flow
      * @return {Array} A list of config keys
      */

    }, {
      key: 'getConfigRequiredKeys',
      value: function getConfigRequiredKeys() {
        return ['gitflow.branch.master', 'gitflow.branch.develop', 'gitflow.prefix.feature', 'gitflow.prefix.release', 'gitflow.prefix.hotfix'];
      }

      /**
      * Checks a config object for all required git flow config keys.
      * @param {Object}  config  An object of git flow config key/value pairs to check
      * @return {Number|String}  An error message, or 0 if all required keys are present.
      */

    }, {
      key: 'validateConfig',
      value: function validateConfig(config) {
        var missingKeys = Config.getConfigRequiredKeys().filter(function (key) {
          return !config[key] || typeof config[key] !== 'string';
        });

        if (missingKeys.length) {
          return 'gitflow config missing key(s): ' + missingKeys.join(', ');
        }

        return 0;
      }

      /**
      * Gets the git flow related config values for the repository
      * @async
      * @param {Repository}  repo  The nodegit repository to get the config values from
      * @return {Object}   An object of git flow config key/value pairs
      */

    }, {
      key: 'getConfig',
      value: function getConfig(repo) {
        if (!repo) {
          return Promise.reject(new Error(constants.ErrorMessage.REPO_REQUIRED));
        }

        var configKeys = _getConfigKeys();

        return repo.config().then(function (config) {
          var promises = configKeys.map(function (key) {
            return config.getString(key);
          });

          return Promise.all(promises);
        }).then(function (values) {
          var result = {};
          configKeys.forEach(function (key, i) {
            result[key] = values[i];
          });

          return result;
        });
      }
    }, {
      key: 'getMasterBranch',
      value: function getMasterBranch(repo) {
        return _getConfigValue(repo, 'gitflow.branch.master');
      }
    }, {
      key: 'getDevelopBranch',
      value: function getDevelopBranch(repo) {
        return _getConfigValue(repo, 'gitflow.branch.develop');
      }
    }, {
      key: 'getFeaturePrefix',
      value: function getFeaturePrefix(repo) {
        return _getConfigValue(repo, 'gitflow.prefix.feature');
      }
    }, {
      key: 'getReleasePrefix',
      value: function getReleasePrefix(repo) {
        return _getConfigValue(repo, 'gitflow.prefix.release');
      }
    }, {
      key: 'getHotfixPrefix',
      value: function getHotfixPrefix(repo) {
        return _getConfigValue(repo, 'gitflow.prefix.hotfix');
      }
    }, {
      key: 'getVersionTagPrefix',
      value: function getVersionTagPrefix(repo) {
        return _getConfigValue(repo, 'gitflow.prefix.versiontag');
      }
    }]);

    return Config;
  }();

  return Config;
};